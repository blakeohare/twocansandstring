import Http;
import Json;
import Math;
import Random;
import UserData;

// TODO: the payload needs to be re-sent until there is a fully successful request.
// Captive portal 200's are messing with this.

namespace TwoCansAlpha3 {
	
	const URL_PREFIX = ($var['use_beta_endpoint'] == true ? 'http://beta.' : 'https://')
		+ "twocansandstring.com/games/api/alpha3";
	
	const SYNC_INTERVAL = 2.0;
	
	class MultiplayerScopeSync {
		
		field request;
		field lastSync = 0;
		field scopeId;
		
		field lastKnownEventId = 0;
		
		field valuesByKeyByUserId = {};
		
		// Invoked when the game sends an initialization response.
		// If there are too many changes for an incremental response, this may also get called,
		// such as when you lose your connection for a while.
		// callback(unorderedStatusObjectList)
		field initializeCallback;
		
		// Invoked when there are incremental changes.
		// callback(orderedStatusObjectList)
		field incrementalCallback;
		
		// Invoked right before the network object is about to make a poll request.
		// This gives you an opportunity to flush changes without causing extraneous or
		// concurrent requests.
		// callback(scopeSyncObject)
		field flushChangesCallback;
		
		// add 2 seconds to this every time you get a 5xx response.
		// set to 0 when you get a 200 response.
		field backOffInterval = 0.0;
		
		// increase this value if the responses are uninteresting.
		// set to 0 if the values are interesting.
		// This is to decrease the rate of polling when nothing is going on.
		field uninterestingInterval = 0.0;
		
		constructor(scopeId) {
			this.scopeId = scopeId;
			this.initializeCallback = this.noop;
			this.incrementalCallback = this.noop;
		}
		
		function noop(ignored) { }
		
		function setInitializeCallback(callback) {
			this.initializeCallback = callback;
			return this;
		}
		
		function setIncrementalCallback(callback) {
			this.incrementalCallback = callback;
			return this;
		}
		
		function setFlushChangesCallback(callback) {
			this.flushChangesCallback = callback;
			return this;
		}
		
		field queuedEventKeys = [];
		field queuedEventValues = [];
		field queuedEventNonces = [];
		
		function queueEvent(key, value) {
			this.queuedEventKeys.add(key + '');
			this.queuedEventValues.add(value + '');
			this.queuedEventNonces.add(Util.generateToken(12));
			this.uninterestingInterval = 0.0;
			
			return this;
		}
		
		function update() {
			syncInterval = SYNC_INTERVAL + this.backOffInterval + this.uninterestingInterval;
			
			if (this.request == null && Core.currentTime() >= this.lastSync + syncInterval) {
				
				if (this.flushChangesCallback != null) {
					this.flushChangesCallback(this);
				}
				
				// This is a hack for if you aren't running the game from within TwoCans.
				// TODO: something a bit friendlier for if this actually becomes a user scenario.
				// The SDK should probably include some login UI
				cookieData = UserData.fileExists('tcas_cookie.txt')
					? UserData.fileReadText('tcas_cookie.txt').trim()
					: null;
				
				payload = {
					"game": $var['game_id'],
					"session": TwoCansApp.sessionId,
					"syncKey": $var['game_secret'],
					"auth": cookieData,
					"scope": '' + this.scopeId,
					"eventId": Math.floor(this.lastKnownEventId),
				};
				
				if (this.queuedEventKeys.length > 0) {
					payload["events"] = {
						"nonce": this.queuedEventNonces,
						"keys": this.queuedEventKeys,
						"values": this.queuedEventValues,
					};
				}
				
				url = URL_PREFIX + '/syncscope';
				print("Send request to: " + url);
				print("Outgoing payload: ");
				outgoingJson = Json.serialize(payload, Json.JsonSerializerFlag.OMIT_DICTIONARY_NULLS);
				outgoingJson = outgoingJson.replace(',}', '}');
				print(outgoingJson);
				this.request = new Http.HttpRequest(url)
					.setContent(
						outgoingJson,
						'application/json')
					.setMethod('POST')
					.sendAsync();
					
				this.queuedEventKeys.clear();
				this.queuedEventValues.clear();
				this.queuedEventNonces.clear();
			}
			
			if (this.request != null && this.request.isDone()) {
				print("Response done");
				response = this.request.getResponse();
				this.request = null;
				this.lastSync = Core.currentTime();
				success = false;
				rawResponse = response.getContent();
				print("Status code: " + response.getStatusCode());
				print("I received this:\n" + rawResponse + "\n-----------");
				if (response.getStatusCode() == 200) {
					responseData = Json.parseJson(rawResponse, true);
					// TODO: verify that the initial user ID is the same as the user ID from the network.
					// Possibly embed the user ID in the 2nd sync request after you identify from the first request.
					if (responseData != null) {
						this.backOffInterval = 0;
						success = true;
						this.processServerResponse(responseData);
					}
				}
				
				if (!success) {
					this.backOffInterval = Math.min(20.0, this.backOffInterval + 2.0);
				}
			}
		}
		
		function processServerResponse(data) {
		
			switch ((data.get('errorId') ?? 'INVALID_RESPONSE') + '') {
			
				case 'OK':
					break;
				
				case 'INVALID_RESPONSE':
					throw new Exception("Server generated an invalid response.");
				
				case 'NOT_LOGGED_IN':
				case 'UNKNOWN_GAME_ID':
				case 'SYNC_KEY_INCORRECT_OR_MISSING':
				case 'SESSION_EXPIRED':
				case 'SESSION_SUPERCEDED':
				case 'REQ_NOT_POST': // regression detection
				case 'REQUEST_PAYLOAD_MISSING': // regression detection
				case 'SESSION_ID_MISSING': // regression detection
					throw new Exception(
						data.get('error')
							?? data.get('errorId')
							?? "Error message not specified.");
			}
			
			playerProfileList = [];
			for (user : data.get('users') ?? []) {
				profile = PlayerProfile.updateUser(user['id'], user['name'], user['login'], user['you'] == 1);
				playerProfileList.add(profile);
			}
			
			isInitialize = data.get('clearAndUseLookup') == 1;
			
			if (isInitialize) {
				this.uninterestingInterval = 0.0;
				this.valuesByKeyByUserId.clear();
				kvps = data.get('lookup');
				keys = kvps['keys'];
				values = kvps['values'];
				userIds = kvps['uids'];
				length = keys.length;
				
				for (i = 0; i < length; ++i) {
					userId = userIds[i];
					key = keys[i];
					value = values[i];
					uLookup = this.valuesByKeyByUserId.get(userId);
					if (uLookup == null) {
						uLookup = {};
						this.valuesByKeyByUserId[userId] = uLookup;
					}
					uLookup[key] = new NetworkStatusObject(PlayerProfile.getUser(userId), key, value);
				}
			}
			
			events = data.get('events');
			if (events != null) {
				keys = events['keys'];
				values = events['values'];
				userIds = events['uids'];
			} else {
				keys = [];
				values = [];
				userIds = [];
			}
			length = keys.length;
			
			incrementalEvents = [];
			for (i = 0; i < length; ++i) {
				key = keys[i];
				value = values[i];
				userId = userIds[i];
				
				if (!isInitialize) {
					incrementalEvents.add(new NetworkStatusObject(PlayerProfile.getUser(userId), key, value));
				}
				
				uLookup = this.valuesByKeyByUserId.get(userId);
				if (uLookup == null) {
					uLookup = {};
					this.valuesByKeyByUserId[userId] = uLookup;
				}
				
				this.uninterestingInterval = 0.0;
			}
			
			if (length == 0) {
				this.uninterestingInterval = Math.min(this.uninterestingInterval + 1.0, 4.0);
			}
			
			this.lastKnownEventId = data.get('eventId');
			
			if (isInitialize) {
				nsoList = [];
				for (nsoLookupForUser : this.valuesByKeyByUserId.values()) {
					nsoList.concat(nsoLookupForUser.values());
				}
				this.initializeCallback(nsoList, playerProfileList);
			} else {
				this.incrementalCallback(incrementalEvents, playerProfileList);
			}
		}
	}
}
