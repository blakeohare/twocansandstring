import Game;
import Graphics2D;

namespace TwoCansAlpha3 {
	
	class InputManager {
		
		static function _tcas_internal_makeInputManager() {
			return new InputManager();
		}
		
		@private
		constructor() {
			
		}
		
		field _pressedKeys = {};
		field _pressedThisFrame = {};
		field _releasedThisFrame = {};
		field _pressedCommandsThisFrame = {};
		field _mousePosition = [0, 0];
		field _mouseClickPosition = null;
		
		function isShiftPressed() { return this._pressedKeys.get(Game.KeyboardKey.SHIFT, false); }
		function isCtrlPressed() { return this._pressedKeys.get(Game.KeyboardKey.CTRL, false); }
		
		// TODO: add direct axis querying
		
		function getAxis(axisName) {
			// TODO: implement this properly.
			output = [0.0, 0.0];
			if (this._pressedKeys.get(KeyboardKey.LEFT, false)) output[0] = -1.0;
			else if (this._pressedKeys.get(KeyboardKey.RIGHT, false)) output[0] = 1.0;
			if (this._pressedKeys.get(KeyboardKey.UP, false)) output[1] = -1.0;
			else if (this._pressedKeys.get(KeyboardKey.DOWN, false)) output[1] = 1.0;
			return output;
		}
		
		function isKeyPressed(key) {
			return this._pressedKeys.get(key, false);
		}
		
		function isKeyPressedThisFrame(key) {
			return this._pressedThisFrame.get(key, false);
		}
		
		function isKeyReleasedThisFrame(key) {
			return this._releasedThisFrame.get(key, false);
		}
		
		function isCommandPressedThisFrame(command) {
			return this._pressedCommandsThisFrame.get(command, false);
		}
		
		function getMousePosition() {
			return this._mousePosition.clone();
		}
		
		function isMouseOver(left, top, width, height) {
			x = this._mousePosition[0];
			y = this._mousePosition[1];
			return x >= left && x < left + width && y >= top && y < top + height;
		}
		
		function didMouseClickHere(left, top, width, height) {
			if (this._mouseClickPosition == null) return false;
			x = this._mouseClickPosition[0];
			y = this._mouseClickPosition[1];
			if (x < left || x >= left + width || y < top || y  >= top + height) {
				return false;
			}
			return true;
		}
	}
}
