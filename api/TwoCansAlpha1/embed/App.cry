import Game;
import Graphics2D;

namespace TwoCansAlpha1 {

	function startGame() {
		TwoCansApp.mainLoop();
	}

	class TwoCansApp {
		
		static field _queuedScene = null;
		
		static function mainLoop() {
			activeScene = new ImageLoadingScene();
			
			title = $var['game_title'];
			fps = ($var['use_60_fps'] == true) ? 60 : 30;
			width = 640;
			height = 480;
			
			window = new GameWindow(title, fps, width, height);
			
			keyEvents = [];
			mouseEvents = [];
			gamepadEvents = [];
			menuEvents = [];
			
			inputManager = new InputManager();
			pressedKeys = inputManager.pressedKeys;
			
			menuKeyConversion = {
				Game.KeyboardKey.LEFT: MenuCommand.LEFT,
				Game.KeyboardKey.UP: MenuCommand.UP,
				Game.KeyboardKey.RIGHT: MenuCommand.RIGHT,
				Game.KeyboardKey.DOWN: MenuCommand.DOWN,
				Game.KeyboardKey.ENTER: MenuCommand.CONFIRM,
				Game.KeyboardKey.SPACE: MenuCommand.CONFIRM,
				Game.KeyboardKey.ESCAPE: MenuCommand.BACK,
				Game.KeyboardKey.BACKSPACE: MenuCommand.BACK,
			};
			
			if ($var['enable_wasd'] == true) {
				menuKeyConversion[Game.KeyboardKey.W] = MenuCommand.UP;
				menuKeyConversion[Game.KeyboardKey.A] = MenuCommand.LEFT;
				menuKeyConversion[Game.KeyboardKey.S] = MenuCommand.DOWN;
				menuKeyConversion[Game.KeyboardKey.D] = MenuCommand.RIGHT;
			}
			
			while (true) {
				for (event : window.pumpEvents()) {
					switch (event.type) {
						case Game.EventType.KEY_DOWN:
						case Game.EventType.KEY_UP:
							isDown = event.type == Game.EventType.KEY_DOWN;
							suppress = false;
							pressedKeys[event.key] = event.down;
							
							switch (event.key) {
								case Game.KeyboardKey.ALT:
								case Game.KeyboardKey.SHIFT:
								case Game.KeyboardKey.CTRL:
									suppress = true;
									break;
									
								case Game.KeyboardKey.BACKSPACE:
								case Game.KeyboardKey.BACKTICK:
								case Game.KeyboardKey.CAPS_LOCK:
								case Game.KeyboardKey.CONTEXT_MENU:
								case Game.KeyboardKey.DELETE:
								case Game.KeyboardKey.END:
								case Game.KeyboardKey.F1:
								case Game.KeyboardKey.F2:
								case Game.KeyboardKey.F3:
								case Game.KeyboardKey.F4:
								case Game.KeyboardKey.F5:
								case Game.KeyboardKey.F6:
								case Game.KeyboardKey.F7:
								case Game.KeyboardKey.F8:
								case Game.KeyboardKey.F9:
								case Game.KeyboardKey.F10:
								case Game.KeyboardKey.F11:
								case Game.KeyboardKey.F12:
								case Game.KeyboardKey.HOME:
								case Game.KeyboardKey.INSERT:
								case Game.KeyboardKey.NUM_LOCK:
								case Game.KeyboardKey.OS_COMMAND:
								case Game.KeyboardKey.PRINT_SCREEN:
								case Game.KeyboardKey.SCROLL_LOCK:
									suppress = true;
									break;
								
								default:
									if (isDown) {
										menuCommand = menuKeyConversion.get(event.key);
										if (menuCommand != null) {
											menuEvents.add(new Event(EventType.MENU, menuCommand, menuCommand, 0, 0, true));
										}
									}
									break;
							}
							
							if (!suppress) {
								//type, key, button, x, y, down
								keyEvents.add(new Event(EventType.KEY, event.key, null, 0, 0, isDown));
							}
							break;
						
						case Game.EventType.MOUSE_LEFT_DOWN:
							mouseEvents.add(new Event(EventType.MOUSE_PRESS, null, null, event.x, event.y, true));
							break;
							
						case Game.EventType.MOUSE_LEFT_UP:
							mouseEvents.add(new Event(EventType.MOUSE_RELEASE, null, null, event.x, event.y, false));
							break;
						
						case Game.EventType.MOUSE_MOVE:
							mouseEvents.add(new Event(EventType.MOUSE_MOVE, null, null, event.x, event.y, false));
							break;
						
						case Game.EventType.QUIT:
							return;
					}
				}
				
				events = keyEvents + mouseEvents;
				events.concat(menuEvents);
				events.concat(gamepadEvents);
				activeScene._SceneBase_update(inputManager, events);
				activeScene._SceneBase_render();
				
				if (TwoCansApp._queuedScene != null) {
					activeScene = TwoCansApp._queuedScene;
					TwoCansApp._queuedScene = null;
				}
				
				window.clockTick();
			}
		}
		
		static function getInitialScene() {
			startSceneClass = null;
			for (scene : Core.Reflection.getClasses(AbstractScene.class)) {
				if (scene.getName() == $var['initial_scene']) {
					startSceneClass = scene;
				}
			}
			
			if (startSceneClass == null) {
				throw new Exception("Starting scene class not found.");
			}
			
			return startSceneClass.createInstance();
		}
	}
}
