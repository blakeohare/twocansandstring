import Math;
import Random;
import TwoCansAlpha1;

class Dot {
	field x;
	field y;
	field angle;
	field color;
	
	constructor(x, y, angle, color) {
		this.x = x;
		this.y = y;
		this.angle = angle;
		this.color = color;
	}
}

class TestScene : AbstractScene {
	
	field mainLayer;
	field cursor = [0, 0];
	field spinningLoc = [320, 240];
	
	constructor() : base() {
		this.addLayer(new SolidColorLayer(Color.WHITE));
		this.mainLayer = this.addLayer(new GraphicsLayer());
	}
	
	static field KEY_LOOKUP = {
	
		KeyboardKey.A: 'A',
		KeyboardKey.APOSTROPHE: 'apostrophe',
		KeyboardKey.B: 'B',
		KeyboardKey.BACKSLASH: '\\',
		KeyboardKey.C: 'C',
		KeyboardKey.CLOSE_BRACKET: ']',
		KeyboardKey.COMMA: ',',
		KeyboardKey.D: 'D',
		KeyboardKey.DOWN: 'down arrow',
		KeyboardKey.E: 'E',
		KeyboardKey.ENTER: 'enter',
		KeyboardKey.EQUALS: '=',
		KeyboardKey.ESCAPE: 'escape',
		KeyboardKey.F: 'F',
		KeyboardKey.G: 'G',
		KeyboardKey.H: 'H',
		KeyboardKey.HYPHEN: '-',
		KeyboardKey.I: 'I',
		KeyboardKey.J: 'J',
		KeyboardKey.K: 'K',
		KeyboardKey.L: 'L',
		KeyboardKey.LEFT: 'left arrow',
		KeyboardKey.M: 'M',
		KeyboardKey.N: 'N',
		KeyboardKey.NUM_0: '0',
		KeyboardKey.NUM_1: '1',
		KeyboardKey.NUM_2: '2',
		KeyboardKey.NUM_3: '3',
		KeyboardKey.NUM_4: '4',
		KeyboardKey.NUM_5: '5',
		KeyboardKey.NUM_6: '6',
		KeyboardKey.NUM_7: '7',
		KeyboardKey.NUM_8: '8',
		KeyboardKey.NUM_9: '9',
		KeyboardKey.O: 'O',
		KeyboardKey.OPEN_BRACKET: '[',
		KeyboardKey.P: 'P',
		KeyboardKey.PAGE_DOWN: 'page down',
		KeyboardKey.PAGE_UP: 'page up',
		KeyboardKey.PAUSE: 'pause',
		KeyboardKey.PERIOD: '.',
		KeyboardKey.Q: 'Q',
		KeyboardKey.R: 'R',
		KeyboardKey.RIGHT: 'right arrow',
		KeyboardKey.S: 'S',
		KeyboardKey.SEMICOLON: ';',
		KeyboardKey.SLASH: '/',
		KeyboardKey.SPACE: 'space',
		KeyboardKey.T: 'T',
		KeyboardKey.TAB: 'tab',
		KeyboardKey.U: 'U',
		KeyboardKey.UP: 'up arrow',
		KeyboardKey.V: 'V',
		KeyboardKey.W: 'W',
		KeyboardKey.X: 'X',
		KeyboardKey.Y: 'Y',
		KeyboardKey.Z: 'Z',
	};
	
	static field MENU_LOOKUP = {
		MenuCommand.LEFT: 'left',
		MenuCommand.UP: 'up',
		MenuCommand.RIGHT: 'right',
		MenuCommand.DOWN: 'down',
		MenuCommand.CONFIRM: 'confirm',
		MenuCommand.BACK: 'back',
	};
	
	function update(inputManager, events) {
		
		scrollOffsetX = 0;
		scrollOffsetY = 0;
		arrowKeyVelocity = 20;
		
		if (inputManager.isKeyPressed(KeyboardKey.LEFT)) {
			scrollOffsetX = arrowKeyVelocity;
		} else if (inputManager.isKeyPressed(KeyboardKey.RIGHT)) {
			scrollOffsetX = -arrowKeyVelocity;
		}
		
		if (inputManager.isKeyPressed(KeyboardKey.UP)) {
			scrollOffsetY = arrowKeyVelocity;
		} else if (inputManager.isKeyPressed(KeyboardKey.DOWN)) {
			scrollOffsetY = -arrowKeyVelocity;
		}
		
		v = 10;
		dx = 0;
		dy = 0;
		if (inputManager.isKeyPressed(KeyboardKey.UP)) dy -= v;
		else if (inputManager.isKeyPressed(KeyboardKey.DOWN)) dy += v;
		if (inputManager.isKeyPressed(KeyboardKey.LEFT)) dx -= v;
		else if (inputManager.isKeyPressed(KeyboardKey.RIGHT)) dx += v;
		spinColor = Color.PINK;
		if (inputManager.isShiftPressed()) spinColor = Color.RED;
		else if (inputManager.isCtrlPressed()) spinColor = Color.PURPLE;
		if (inputManager.isShiftPressed() && inputManager.isCtrlPressed()) spinColor = Color.BROWN;
		this.spinningLoc[0] += dx;
		this.spinningLoc[1] += dy;
		
		for (event : events) {
			switch (event.type) {
				case EventType.KEY:
					print("Key " + (event.down ? "down" : "up") + " event for " + TestScene.KEY_LOOKUP[event.key]);
					break;
					
				case EventType.MENU:
					print("Menu event: " + TestScene.MENU_LOOKUP[event.button]);
					break;
					
				case EventType.MOUSE_PRESS:
					print("Mouse pressed at: " + event.x + ", " + event.y);
					break;
				case EventType.MOUSE_RELEASE:
					print("Mouse released at: " + event.x + ", " + event.y);
					break;
				case EventType.MOUSE_MOVE:
					print("Mouse move at: " + event.x + ", " + event.y);
					this.cursor[0] = event.x;
					this.cursor[1] = event.y;
					break;
				default:
					print("Unknown event type " + event.type);
					break;
			}
		}
		
	}
	
	field rc = 0;
	function render() {
		rc = this.rc++;
		
		stickFigure = Images.get('image.png');
		x = (4 * rc) % 900 - 200;
		this.mainLayer.drawImage(stickFigure, x, 240 - stickFigure.height / 2);
		this.mainLayer.drawImage(Images.get('jpeg.jpg'), 400, 10);
		
		this.mainLayer.drawEllipse(100, 100, 200, 100, Color.GREEN);
		this.mainLayer.drawCircle(150, 350, 80, Color.PURPLE);
		this.mainLayer.drawRectangle(400, 100, 80, 120, Color.YELLOW);
		this.mainLayer.drawTriangle(400, 300, 440, 320, 420, 460, Color.RED);
		this.mainLayer.drawQuad(50, 50, 70, 50, 70, 70, 50, 80, Color.BLUE);
		
		pts = [];
		radius = 40;
		for (i = 0; i < 4; ++i) {
			ang = Math.PI * 2 / 4 * i + Math.PI * 2 * rc / 60;
			pts.add([Math.cos(ang) * radius + this.spinningLoc[0], -Math.sin(ang) * radius + this.spinningLoc[1]]);
		}
		a = pts[0];
		b = pts[1];
		c = pts[2];
		d = pts[3];
		this.mainLayer.drawQuad(a[0], a[1], b[0], b[1], c[0], c[1], d[0], d[1], Color.PINK);
		
		this.mainLayer.drawRectangle(this.cursor[0] - 4, this.cursor[1] - 4, 8, 8, Color.BLACK);
	}
}
