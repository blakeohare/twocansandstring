import Math;
import Random;
import TwoCansAlpha4;
import Graphics2D;
import Graphics2DText;

class TestScene : AbstractScene {
	
	field cursor = [0, 0];
	field spinningLoc = [320, 240];
	
	constructor() : base() {
	}
	
	static field KEY_LOOKUP = {
	
		KeyboardKey.A: 'A',
		KeyboardKey.APOSTROPHE: 'apostrophe',
		KeyboardKey.B: 'B',
		KeyboardKey.BACKSLASH: '\\',
		KeyboardKey.C: 'C',
		KeyboardKey.CLOSE_BRACKET: ']',
		KeyboardKey.COMMA: ',',
		KeyboardKey.D: 'D',
		KeyboardKey.DOWN: 'down arrow',
		KeyboardKey.E: 'E',
		KeyboardKey.ENTER: 'enter',
		KeyboardKey.EQUALS: '=',
		KeyboardKey.ESCAPE: 'escape',
		KeyboardKey.F: 'F',
		KeyboardKey.G: 'G',
		KeyboardKey.H: 'H',
		KeyboardKey.HYPHEN: '-',
		KeyboardKey.I: 'I',
		KeyboardKey.J: 'J',
		KeyboardKey.K: 'K',
		KeyboardKey.L: 'L',
		KeyboardKey.LEFT: 'left arrow',
		KeyboardKey.M: 'M',
		KeyboardKey.N: 'N',
		KeyboardKey.NUM_0: '0',
		KeyboardKey.NUM_1: '1',
		KeyboardKey.NUM_2: '2',
		KeyboardKey.NUM_3: '3',
		KeyboardKey.NUM_4: '4',
		KeyboardKey.NUM_5: '5',
		KeyboardKey.NUM_6: '6',
		KeyboardKey.NUM_7: '7',
		KeyboardKey.NUM_8: '8',
		KeyboardKey.NUM_9: '9',
		KeyboardKey.O: 'O',
		KeyboardKey.OPEN_BRACKET: '[',
		KeyboardKey.P: 'P',
		KeyboardKey.PAGE_DOWN: 'page down',
		KeyboardKey.PAGE_UP: 'page up',
		KeyboardKey.PAUSE: 'pause',
		KeyboardKey.PERIOD: '.',
		KeyboardKey.Q: 'Q',
		KeyboardKey.R: 'R',
		KeyboardKey.RIGHT: 'right arrow',
		KeyboardKey.S: 'S',
		KeyboardKey.SEMICOLON: ';',
		KeyboardKey.SLASH: '/',
		KeyboardKey.SPACE: 'space',
		KeyboardKey.T: 'T',
		KeyboardKey.TAB: 'tab',
		KeyboardKey.U: 'U',
		KeyboardKey.UP: 'up arrow',
		KeyboardKey.V: 'V',
		KeyboardKey.W: 'W',
		KeyboardKey.X: 'X',
		KeyboardKey.Y: 'Y',
		KeyboardKey.Z: 'Z',
	};
	
	static field MENU_LOOKUP = {
		MenuCommand.LEFT: 'left',
		MenuCommand.UP: 'up',
		MenuCommand.RIGHT: 'right',
		MenuCommand.DOWN: 'down',
		MenuCommand.CONFIRM: 'confirm',
		MenuCommand.BACK: 'back',
	};
	
	static field PINK = [255, 128, 160];
	static field RED = [255, 0, 0];
	static field PURPLE = [128, 0, 128];
	static field BROWN = [128, 64, 0];
	
	field spinColor = TestScene.PINK;
	
	field overlayColor = null;
	
	function update(inputManager, events) {
		
		scrollOffsetX = 0;
		scrollOffsetY = 0;
		arrowKeyVelocity = 20;
		
		if (inputManager.isKeyPressed(KeyboardKey.LEFT)) {
			scrollOffsetX = arrowKeyVelocity;
		} else if (inputManager.isKeyPressed(KeyboardKey.RIGHT)) {
			scrollOffsetX = -arrowKeyVelocity;
		}
		
		if (inputManager.isKeyPressed(KeyboardKey.UP)) {
			scrollOffsetY = arrowKeyVelocity;
		} else if (inputManager.isKeyPressed(KeyboardKey.DOWN)) {
			scrollOffsetY = -arrowKeyVelocity;
		}
		
		v = 10;
		dx = 0;
		dy = 0;
		if (inputManager.isKeyPressed(KeyboardKey.UP)) dy -= v;
		else if (inputManager.isKeyPressed(KeyboardKey.DOWN)) dy += v;
		if (inputManager.isKeyPressed(KeyboardKey.LEFT)) dx -= v;
		else if (inputManager.isKeyPressed(KeyboardKey.RIGHT)) dx += v;
		this.spinColor = TestScene.PINK;
		if (inputManager.isShiftPressed()) this.spinColor = TestScene.RED;
		else if (inputManager.isCtrlPressed()) this.spinColor = TestScene.PURPLE;
		if (inputManager.isShiftPressed() && inputManager.isCtrlPressed()) this.spinColor = TestScene.BROWN;
		
		this.spinningLoc[0] += dx;
		this.spinningLoc[1] += dy;
		
		for (event : events) {
			switch (event.type) {
				case EventType.KEY:
					this.screenPrint("Key " + (event.down ? "down" : "up") + " event for " + TestScene.KEY_LOOKUP[event.key]);
					if (event.key == KeyboardKey.S) {
						this.switchScene(new FadeTransitionScene(this, new TestScene(), 3, true, [0, 0, 255]));
					}
					break;
					
				case EventType.MENU:
					this.screenPrint("Menu event: " + TestScene.MENU_LOOKUP[event.button]);
					break;
					
				case EventType.MOUSE_PRESS:
					this.screenPrint("Mouse pressed at: " + event.x + ", " + event.y);
					break;
				case EventType.MOUSE_RELEASE:
					this.screenPrint("Mouse released at: " + event.x + ", " + event.y);
					break;
				case EventType.MOUSE_MOVE:
					this.screenPrint("Mouse move at: " + event.x + ", " + event.y);
					this.cursor[0] = event.x;
					this.cursor[1] = event.y;
					break;
				default:
					this.screenPrint("Unknown event type " + event.type);
					break;
			}
		}
		
		if (inputManager.isKeyPressedThisFrame(KeyboardKey.O)) {
			this.overlayColor = [255, 0, 0];
		} else if (inputManager.isKeyReleasedThisFrame(KeyboardKey.O)) {
			this.overlayColor = [0, 0, 255];
		} else {
			this.overlayColor = null;
		}
		
		if (inputManager.didMouseClickHere(400, 100, 80, 120)) {
			this.overlayColor = [255, 255, 0];
		}
		
		if (inputManager.isMouseOver(480, 220, 10, 10)) {
			this.overlayColor = [255, 80, 150];
		}
	}
	
	field rc = 0;
	function render() {
		Graphics2D.Draw.fill(255, 255, 255);
		
		rc = this.rc++;
		
		stickFigure = Images.get('image.png');
		x = (4 * rc) % 900 - 200;
		stickFigure.draw(x, 240 - stickFigure.height / 2);
		Images.get('jpeg.jpg').draw(400, 10);
		
		Graphics2D.Draw.ellipse(100, 100, 200, 100, 0, 128, 0);
		Graphics2D.Draw.circle(150, 350, 80, 128, 0, 128);
		Graphics2D.Draw.triangle(400, 300, 440, 320, 420, 460, 255, 0, 0);
		Graphics2D.Draw.quad(50, 50, 70, 50, 70, 70, 50, 80, 0, 0, 255);
		
		Graphics2D.Draw.rectangle(400, 100, 80, 120, 255, 255, 0);
		Graphics2D.Draw.rectangle(480, 220, 10, 10, 255, 80, 150);
		
		pts = [];
		radius = 40;
		for (i = 0; i < 4; ++i) {
			ang = Math.PI * 2 / 4 * i + Math.PI * 2 * rc / 60;
			pts.add([Math.cos(ang) * radius + this.spinningLoc[0], -Math.sin(ang) * radius + this.spinningLoc[1]]);
		}
		a = pts[0];
		b = pts[1];
		c = pts[2];
		d = pts[3];
		Graphics2D.Draw.quad(a[0], a[1], b[0], b[1], c[0], c[1], d[0], d[1], this.spinColor[0], this.spinColor[1], this.spinColor[2]);
		
		Graphics2D.Draw.rectangle(this.cursor[0] - 4, this.cursor[1] - 4, 8, 8, 0, 0, 0);
		
		x = 10;
		y = 10;
		for (item : this.textBuffer) {
			item.draw(x, y);
			y += 20;
		}
		
		if (this.overlayColor != null) {
			Graphics2D.Draw.fill(this.overlayColor[0], this.overlayColor[1], this.overlayColor[2]);
		}
	}
	
	field font;
	field textBuffer = [];
	function screenPrint(msg) {
		if (this.font == null) {
			fontRes = FontResource.fromSystem('Arial');
			this.font = fontRes.getRenderer().setColor(0, 0, 0).setSize(12);
		}
		img = this.font.render(msg + '');
		this.textBuffer.add(img);
		if (this.textBuffer.length > 20) {
			this.textBuffer = this.textBuffer[1:];
		}
	}
}
